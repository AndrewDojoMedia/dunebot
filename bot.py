import telebot
from telebot import types
from datetime import datetime, timedelta
import config
from subscription_handler import SubscriptionHandler
import uuid
import logging
import os

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å
BASE_DIR = '/var/botvpn'

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
LOG_FILE = os.path.join(BASE_DIR, 'bot.log')
CONFIG_FILE = os.path.join(BASE_DIR, 'config.json')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

bot = telebot.TeleBot(config.BOT_TOKEN)
sub_handler = SubscriptionHandler()

@bot.message_handler(commands=['start'])
def start(message):
    try:
        subscriptions = sub_handler.get_user_subscriptions(message.from_user.id)
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏
        welcome_text = (
            "üåç VPN DUNE üåç\n\n"
            "üí° –î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ 'üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'\n"
            "üëâ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞–∂–º–∏—Ç–µ 'üåü –ú–æ–π VPN'\n\n"
            "üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:\n"
            "‚Ä¢ 1 –º–µ—Å—è—Ü - 299‚ÇΩ\n"
            "‚Ä¢ 3 –º–µ—Å—è—Ü–∞ - 852‚ÇΩ (‚ú® —Å–∫–∏–¥–∫–∞ 5%)\n"
            "‚Ä¢ 6 –º–µ—Å—è—Ü–µ–≤ - 1615‚ÇΩ (üåü —Å–∫–∏–¥–∫–∞ 10%)\n"
            "‚Ä¢ 12 –º–µ—Å—è—Ü–µ–≤ - 3052‚ÇΩ (üí´ —Å–∫–∏–¥–∫–∞ 15%)"
        )
        
        if subscriptions:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            buttons = [
                "üåü –ú–æ–π VPN",
                "üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É",
                "üí° –ü–æ–º–æ—â—å"
            ]
        else:
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ—Ç
            buttons = [
                "üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                "üåü –ú–æ–π VPN",
                "üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É",
                "üí° –ü–æ–º–æ—â—å"
            ]
        
        # –°–æ–∑–¥–∞–µ–º —Ä—è–¥—ã –∫–Ω–æ–ø–æ–∫ –ø–æ 2 –≤ –∫–∞–∂–¥–æ–º
        for i in range(0, len(buttons), 2):
            row_buttons = buttons[i:i+2]
            markup.row(*row_buttons)
        
        bot.send_message(
            message.chat.id,
            welcome_text,
            reply_markup=markup
        )
        
    except Exception as e:
        logger.error(f"Error in start: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@bot.message_handler(func=lambda message: message.text == "üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
def subscription_menu(message):
    markup = types.InlineKeyboardMarkup(row_width=1)  # –°—Ç–∞–≤–∏–º –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–∏–∫
    buttons = [
        types.InlineKeyboardButton(
            "1 –º–µ—Å—è—Ü - 299‚ÇΩ", 
            callback_data="sub_1_299"
        ),
        types.InlineKeyboardButton(
            "3 –º–µ—Å—è—Ü–∞ - 852‚ÇΩ\n‚ú® –°–∫–∏–¥–∫–∞ 5%", 
            callback_data="sub_3_852"
        ),
        types.InlineKeyboardButton(
            "6 –º–µ—Å—è—Ü–µ–≤ - 1615‚ÇΩ\nüåü –°–∫–∏–¥–∫–∞ 10%", 
            callback_data="sub_6_1615"
        ),
        types.InlineKeyboardButton(
            "12 –º–µ—Å—è—Ü–µ–≤ - 3052‚ÇΩ\nüí´ –°–∫–∏–¥–∫–∞ 15%", 
            callback_data="sub_12_3052"
        )
    ]
    markup.add(*buttons)
    
    bot.send_message(
        message.chat.id,
        "‚ú® <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
        "‚Ä¢ üöÄ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫\n"
        "‚Ä¢ ‚ö°Ô∏è –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n"
        "‚Ä¢ üí´ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7",
        reply_markup=markup,
        parse_mode='HTML'
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('sub_'))
def handle_subscription(call):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
        parts = call.data.split('_')
        if len(parts) == 4:  # –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
            _, duration, price, device_id = parts
        else:  # –î–ª—è –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            _, duration, price = parts
            device_id = str(uuid.uuid4())[:8]
        
        user_id = call.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment_url = sub_handler.create_payment(int(duration), int(price))
        
        # –ü–æ–∫–∞ —É –Ω–∞—Å –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã, –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º/–ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(
            "–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞", 
            callback_data=f"pay_{duration}_{device_id}"
        ))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {duration} –º–µ—Å.\n"
                 f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}‚ÇΩ\n\n"
                 f"–î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=markup
        )
        
    except Exception as e:
        logger.error(f"Error in handle_subscription: {e}")
        bot.answer_callback_query(
            call.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ "–æ–ø–ª–∞—Ç—ã"
@bot.callback_query_handler(func=lambda call: call.data.startswith('pay_'))
def handle_payment(call):
    duration, device_id = call.data.split('_')[1:]
    user_id = call.from_user.id
    
    try:
        result = sub_handler.add_subscription(user_id, int(duration), device_id)
        
        if result['success']:
            config_link = sub_handler.xui_client.get_client_config(result['uuid'], device_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n"
                     f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º–µ—Å.\n"
                     f"ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {device_id}\n\n"
                     f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n\n"
                     f"{config_link}\n\n"
                     f"–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n"
                     f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ: /help_setup"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            bot.send_message(
                chat_id=call.message.chat.id,
                text=config_link,  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                disable_web_page_preview=True  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–∫–∏
            )
        else:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            )
    except Exception as e:
        logger.error(f"Error in handle_payment: {str(e)}")
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        )

# –î–æ–±–∞–≤–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
@bot.message_handler(commands=['help_setup'])
def help_setup(message):
    setup_text = (
        "üì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:\n\n"
        "1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ v2rayNG –∏–∑ Google Play\n"
        "2. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
        "3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ (+) –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É\n"
        "4. –í—ã–±–µ—Ä–∏—Ç–µ 'Import config from clipboard'\n"
        "5. –í—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É\n"
        "6. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n\n"
        "üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ v2rayNG:\n"
        "https://play.google.com/store/apps/details?id=com.v2ray.ang"
    )
    bot.send_message(message.chat.id, setup_text)

@bot.message_handler(func=lambda message: message.text == "üí° –ü–æ–º–æ—â—å")
def help_handler(message):
    try:
        markup = types.InlineKeyboardMarkup(row_width=1)
        buttons = [
            types.InlineKeyboardButton("üçé iOS / iPadOS / MacOS", callback_data="help_ios"),
            types.InlineKeyboardButton("üì± Android", callback_data="help_android"),
            types.InlineKeyboardButton("üì± Huawei / Honor", callback_data="help_huawei"),
            types.InlineKeyboardButton("üíª Windows", callback_data="help_windows"),
            types.InlineKeyboardButton("üì∫ Android TV", callback_data="help_androidtv"),
            types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="help_update")
        ]
        markup.add(*buttons)
        
        # –£–±–∏—Ä–∞–µ–º —Ñ—Ä–∞–∑—É –ø—Ä–æ –ø–æ–¥–¥–µ—Ä–∂–∫—É
        bot.send_message(
            message.chat.id,
            "üí° <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>",
            reply_markup=markup,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"Error in help_handler: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@bot.message_handler(func=lambda message: message.text == "üåü –ú–æ–π VPN")
def my_vpn(message):
    try:
        subscriptions = sub_handler.get_user_subscriptions(message.from_user.id)
        
        if not subscriptions:
            bot.send_message(message.chat.id, 
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n"
                "–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–∂–º–∏—Ç–µ 'üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'")
            return
        
        for sub in subscriptions:
            start_date = datetime.fromisoformat(sub[1])
            end_date = datetime.fromisoformat(sub[2])
            device_id = sub[5]
            uuid = sub[7]
            
            markup = types.InlineKeyboardMarkup(row_width=1)
            buttons = [
                types.InlineKeyboardButton(
                    "‚≠êÔ∏è –ü–†–û–î–õ–ò–¢–¨ –¢–ê–†–ò–§", 
                    callback_data=f"extend_{device_id}"
                ),
                types.InlineKeyboardButton(
                    "‚ûï –î–û–ë–ê–í–ò–¢–¨ –£–°–¢–†–û–ô–°–¢–í–û", 
                    callback_data=f"more_devices_{device_id}"
                ),
                types.InlineKeyboardButton(
                    "üéØ –ü–û–î–ê–†–ò–¢–¨ –ü–û–î–ü–ò–°–ö–£", 
                    callback_data=f"gift_{device_id}"
                ),
                types.InlineKeyboardButton(
                    "üîÑ –ù–ê–°–¢–†–û–ò–¢–¨ –ê–í–¢–û–ü–†–û–î–õ–ï–ù–ò–ï", 
                    callback_data=f"autopay_{device_id}"
                )
            ]
            markup.add(*buttons)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –±–µ–∑ —Ñ—Ä–∞–∑—ã –ø—Ä–æ –ø–æ–¥–¥–µ—Ä–∂–∫—É
            message_text = (
                f"üåü <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ</b>\n\n"
                f"üì± ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {device_id}\n"
                f"üìÖ –î–∞—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {start_date.strftime('%d.%m.%Y')}\n"
                f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date.strftime('%d.%m.%Y')}\n"
                f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {(end_date - datetime.now()).days} –¥–Ω–µ–π\n"
            )
            
            bot.send_message(
                message.chat.id,
                message_text,
                reply_markup=markup,
                parse_mode='HTML'
            )
            
    except Exception as e:
        logger.error(f"Error in my_vpn: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏
@bot.message_handler(func=lambda message: message.text == "üîÑ –¢–µ—Å—Ç")
def test_handler(message):
    try:
        bot.reply_to(message, "üîÑ –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è")
    except Exception as e:
        logger.error(f"Error in test_handler: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏
@bot.message_handler(func=lambda message: message.text == "üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É")
def get_subscription_link(message):
    try:
        subscriptions = sub_handler.get_user_subscriptions(message.from_user.id)
        
        if not subscriptions:
            bot.send_message(message.chat.id, 
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n"
                "–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–∂–º–∏—Ç–µ 'üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'")
            return
        
        # –î–ª—è –∫–∞–∂–¥–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –∏ –º–µ–Ω—é
        for sub in subscriptions:
            device_id = sub[5]
            uuid = sub[7]
            end_date = datetime.fromisoformat(sub[2])
            
            try:
                config_link = sub_handler.xui_client.get_client_config(uuid, device_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
                bot.send_message(
                    message.chat.id,
                    f"üîó <b>–í–∞—à–∞ VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è</b>\n\n"
                    f"üì± ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {device_id}\n"
                    f"üìÖ –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ: {end_date.strftime('%d.%m.%y %H:%M')}\n"
                    f"üåç –†–µ–≥–∏–æ–Ω: üá´üáÆ –•–µ–ª—å—Å–∏–Ω–∫–∏\n\n"
                    f"<code>{config_link}</code>\n\n"
                    f"–ü—Ä–æ—Å—Ç–æ <b>–æ–±–Ω–æ–≤–∏—Ç—å</b> —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n\n"
                    f"üëá –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ üëá",
                    parse_mode='HTML',
                    disable_web_page_preview=True
                )
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
                markup = types.InlineKeyboardMarkup(row_width=1)
                buttons = [
                    types.InlineKeyboardButton(
                        "üçé iOS / iPadOS / MacOS", 
                        callback_data=f"setup_ios_{device_id}_{uuid}"
                    ),
                    types.InlineKeyboardButton(
                        "üì± Android", 
                        callback_data=f"setup_android_{device_id}_{uuid}"
                    ),
                    types.InlineKeyboardButton(
                        "üì± Huawei / Honor", 
                        callback_data=f"setup_huawei_{device_id}_{uuid}"
                    ),
                    types.InlineKeyboardButton(
                        "üíª Windows", 
                        callback_data=f"setup_windows_{device_id}_{uuid}"
                    ),
                    types.InlineKeyboardButton(
                        "üì∫ Android TV", 
                        callback_data=f"setup_androidtv_{device_id}_{uuid}"
                    ),
                    types.InlineKeyboardButton(
                        "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏", 
                        callback_data=f"refresh_link_{device_id}_{uuid}"
                    )
                ]
                markup.add(*buttons)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
                bot.send_message(
                    message.chat.id,
                    "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:",
                    reply_markup=markup
                )
                
            except Exception as e:
                logger.error(f"Error getting config link: {e}")
                bot.send_message(
                    message.chat.id,
                    f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device_id}.\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                )
                
    except Exception as e:
        logger.error(f"Error in get_subscription_link: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith(('help_', 'setup_')))
def handle_help_callback(call):
    try:
        action, platform = call.data.split('_')[:2]
        logger.info(f"Help callback triggered. Action: {action}, Platform: {platform}")
        
        if call.data == "help_back":
            return handle_back_button(call)
            
        instructions = {
            'ios': (
                "üçé <b>iOS / iPadOS / MacOS</b>\n\n"
                "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Streisand –∏–∑ App Store\n"
                "2. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
                "3. –ù–∞–∂–º–∏—Ç–µ (+) –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞\n"
                "4. –í—ã–±–µ—Ä–∏—Ç–µ \"Import from Clipboard\"\n"
                "5. –í—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É\n"
                "6. –í–∫–ª—é—á–∏—Ç–µ VPN\n\n"
                "üì± <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b>\n"
                "https://apps.apple.com/app/streisand/id6450534064"
            ),
            'android': (
                "üì± <b>Android</b>\n\n"
                "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ v2rayNG –∏–∑ Google Play\n"
                "2. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
                "3. –ù–∞–∂–º–∏—Ç–µ (+) –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É\n"
                "4. –í—ã–±–µ—Ä–∏—Ç–µ \"Import config from clipboard\"\n"
                "5. –í—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É\n"
                "6. –í–∫–ª—é—á–∏—Ç–µ VPN\n\n"
                "üì± <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b>\n"
                "https://play.google.com/store/apps/details?id=com.v2ray.ang"
            ),
            'huawei': (
                "üì± <b>Huawei / Honor</b>\n\n"
                "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ v2rayNG –∏–∑ AppGallery\n"
                "2. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
                "3. –ù–∞–∂–º–∏—Ç–µ (+) –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É\n"
                "4. –í—ã–±–µ—Ä–∏—Ç–µ \"Import config from clipboard\"\n"
                "5. –í—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É\n"
                "6. –í–∫–ª—é—á–∏—Ç–µ VPN\n\n"
                "üì± <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b>\n"
                "https://appgallery.huawei.com/app/C102481599"
            ),
            'windows': (
                "üíª <b>Windows</b>\n\n"
                "1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ v2rayN\n"
                "2. –†–∞—Å–ø–∞–∫—É–π—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É\n"
                "3. –ù–∞–∂–º–∏—Ç–µ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –Ω–∞ –∑–Ω–∞—á–æ–∫ –≤ —Ç—Ä–µ–µ\n"
                "4. –í—ã–±–µ—Ä–∏—Ç–µ \"Import from clipboard\"\n"
                "5. –í—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É\n"
                "6. –í–∫–ª—é—á–∏—Ç–µ VPN\n\n"
                "üíª <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—É:</b>\n"
                "https://github.com/2dust/v2rayN/releases"
            ),
            'androidtv': (
                "üì∫ <b>Android TV</b>\n\n"
                "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ v2rayNG\n"
                "2. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
                "3. –ù–∞–∂–º–∏—Ç–µ (+) –Ω–∞ –ø—É–ª—å—Ç–µ\n"
                "4. –í—ã–±–µ—Ä–∏—Ç–µ \"Import config from clipboard\"\n"
                "5. –í—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É\n"
                "6. –í–∫–ª—é—á–∏—Ç–µ VPN\n\n"
                "üì∫ <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b>\n"
                "https://play.google.com/store/apps/details?id=com.v2ray.ang"
            )
        }

        if platform == 'android':
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="help_back"))
            
            video_path = '/var/botvpn/android_guide.mp4'
            if os.path.exists(video_path):
                try:
                    logger.info("Sending Android video guide...")
                    with open(video_path, 'rb') as video:
                        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤–∏–¥–µ–æ
                        try:
                            bot.delete_message(
                                chat_id=call.message.chat.id,
                                message_id=call.message.message_id
                            )
                        except:
                            pass
                            
                        bot.send_video(
                            chat_id=call.message.chat.id,
                            video=video,
                            caption=instructions['android'],
                            parse_mode='HTML',
                            reply_markup=markup
                        )
                    logger.info("Android video guide sent successfully")
                    return
                except Exception as e:
                    logger.error(f"Error sending video: {e}")
                    
        if platform in instructions:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="help_back"))
            
            try:
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=instructions[platform],
                    reply_markup=markup,
                    parse_mode='HTML',
                    disable_web_page_preview=True
                )
            except Exception as e:
                logger.error(f"Error editing message: {e}")
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                bot.send_message(
                    call.message.chat.id,
                    instructions[platform],
                    reply_markup=markup,
                    parse_mode='HTML',
                    disable_web_page_preview=True
                )
                
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"Error in handle_help_callback: {e}", exc_info=True)
        bot.answer_callback_query(
            call.id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )

@bot.callback_query_handler(func=lambda call: call.data == "buy_new_device")
def handle_buy_new_device(call):
    try:
        # –ü–æ–ª—É—á–∞–µ–º device_id –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        previous_message = call.message.text
        device_id = None
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        markup = types.InlineKeyboardMarkup(row_width=1)
        buttons = [
            types.InlineKeyboardButton(
                "1 –º–µ—Å—è—Ü - 299‚ÇΩ", 
                callback_data="sub_1_299"
            ),
            types.InlineKeyboardButton(
                "3 –º–µ—Å—è—Ü–∞ - 852‚ÇΩ\n‚ú® –°–∫–∏–¥–∫–∞ 5%", 
                callback_data="sub_3_852"
            ),
            types.InlineKeyboardButton(
                "6 –º–µ—Å—è—Ü–µ–≤ - 1615‚ÇΩ\nüåü –°–∫–∏–¥–∫–∞ 10%", 
                callback_data="sub_6_1615"
            ),
            types.InlineKeyboardButton(
                "12 –º–µ—Å—è—Ü–µ–≤ - 3052‚ÇΩ\nüí´ –°–∫–∏–¥–∫–∞ 15%", 
                callback_data="sub_12_3052"
            ),
            types.InlineKeyboardButton(
                "‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", 
                callback_data=f"more_devices_back"
            )
        ]
        markup.add(*buttons)
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=(
                "üåü <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</b>\n\n"
                "‚Ä¢ –ö–∞–∂–¥–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏\n"
                "‚Ä¢ –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞\n"
                "‚Ä¢ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã\n\n"
                "‚ú® <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</b>"
            ),
            reply_markup=markup,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"Error in handle_buy_new_device: {e}")
        bot.answer_callback_query(
            call.id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –º–µ–Ω—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤
@bot.callback_query_handler(func=lambda call: call.data == "more_devices_back")
def handle_more_devices_back(call):
    try:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ–Ω—é
        markup = types.InlineKeyboardMarkup(row_width=1)
        buttons = [
            types.InlineKeyboardButton(
                "üíé –ö—É–ø–∏—Ç—å VPN –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", 
                callback_data="buy_new_device"
            ),
            types.InlineKeyboardButton(
                "‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", 
                callback_data="return_to_main"
            )
        ]
        markup.add(*buttons)
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=(
                "üì± <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</b>\n\n"
                "‚Ä¢ –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω—É–∂–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞\n"
                "‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã\n"
                "‚Ä¢ –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:"
            ),
            reply_markup=markup,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"Error in handle_more_devices_back: {e}")
        bot.answer_callback_query(
            call.id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.callback_query_handler(func=lambda call: call.data == "return_to_main")
def handle_return_to_main(call):
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        subscriptions = sub_handler.get_user_subscriptions(call.from_user.id)
        
        if subscriptions:
            buttons = [
                "üåü –ú–æ–π VPN",
                "üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É",
                "üí° –ü–æ–º–æ—â—å"
            ]
        else:
            buttons = [
                "üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                "üåü –ú–æ–π VPN",
                "üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É",
                "üí° –ü–æ–º–æ—â—å"
            ]
        
        # –°–æ–∑–¥–∞–µ–º —Ä—è–¥—ã –∫–Ω–æ–ø–æ–∫ –ø–æ 2 –≤ –∫–∞–∂–¥–æ–º
        for i in range(0, len(buttons), 2):
            row_buttons = buttons[i:i+2]
            markup.row(*row_buttons)
            
        # –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            bot.delete_message(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id
            )
        except:
            pass
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        bot.send_message(
            call.message.chat.id,
            "üåç –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=markup
        )
        
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"Error in handle_return_to_main: {e}", exc_info=True)
        bot.answer_callback_query(
            call.id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )

@bot.message_handler(func=lambda message: True)
def echo_all(message):
    bot.send_message(message.chat.id, 
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.\n"
        "–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ /start")

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é VPN
def my_vpn_menu(message, device_id):
    try:
        subscriptions = sub_handler.get_user_subscriptions(message.from_user.id)
        
        for sub in subscriptions:
            if sub[5] == device_id:  # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ device_id
                end_date = datetime.fromisoformat(sub[2])
                
                markup = types.InlineKeyboardMarkup(row_width=1)
                buttons = [
                    types.InlineKeyboardButton(
                        "‚≠êÔ∏è –ü–†–û–î–õ–ò–¢–¨ –¢–ê–†–ò–§", 
                        callback_data=f"extend_{device_id}"
                    ),
                    types.InlineKeyboardButton(
                        "‚ûï –î–û–ë–ê–í–ò–¢–¨ –£–°–¢–†–û–ô–°–¢–í–û", 
                        callback_data=f"more_devices_{device_id}"
                    )
                ]
                markup.add(*buttons)
                
                message_text = (
                    f"‚ö°Ô∏è –ü—Ä–æ—Ç–æ–∫–æ–ª:\n"
                    f"‚îî VLESS\n\n"
                    f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ:\n"
                    f"‚îî {end_date.strftime('%d.%m.%y %H:%M')}\n\n"
                    f"üåç –†–µ–≥–∏–æ–Ω:\n"
                    f"‚îî üá´üáÆ –§–∏–Ω–ª—è–Ω–¥–∏—è\n\n"
                    f"üì± –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:\n"
                    f"‚îî 1"
                )
                
                bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=message.message_id,
                    text=message_text,
                    reply_markup=markup,
                    parse_mode='HTML'
                )
                return
                
    except Exception as e:
        logger.error(f"Error in my_vpn_menu: {e}")
        bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=message.message_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith('return_to_vpn_'))
def handle_return(call):
    try:
        device_id = call.data.split('_')[-1]
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscriptions = sub_handler.get_user_subscriptions(call.from_user.id)
        
        for sub in subscriptions:
            if sub[5] == device_id:  # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ device_id
                end_date = datetime.fromisoformat(sub[2])
                
                markup = types.InlineKeyboardMarkup(row_width=1)
                buttons = [
                    types.InlineKeyboardButton(
                        "‚≠êÔ∏è –ü–†–û–î–õ–ò–¢–¨ –¢–ê–†–ò–§", 
                        callback_data=f"extend_{device_id}"
                    ),
                    types.InlineKeyboardButton(
                        "‚ûï –î–û–ë–ê–í–ò–¢–¨ –£–°–¢–†–û–ô–°–¢–í–û", 
                        callback_data=f"more_devices_{device_id}"
                    )
                ]
                markup.add(*buttons)
                
                message_text = (
                    f"‚ö°Ô∏è –ü—Ä–æ—Ç–æ–∫–æ–ª:\n"
                    f"‚îî VLESS\n\n"
                    f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ:\n"
                    f"‚îî {end_date.strftime('%d.%m.%y %H:%M')}\n\n"
                    f"üåç –†–µ–≥–∏–æ–Ω:\n"
                    f"‚îî üá´üáÆ –§–∏–Ω–ª—è–Ω–¥–∏—è\n\n"
                    f"üì± –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:\n"
                    f"‚îî 1"
                )
                
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=message_text,
                    reply_markup=markup,
                    parse_mode='HTML'
                )
                return
                
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        bot.answer_callback_query(
            call.id,
            text="‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            show_alert=True
        )
                
    except Exception as e:
        logger.error(f"Error in handle_return: {e}")
        bot.answer_callback_query(
            call.id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith('more_devices_'))
def handle_more_devices(call):
    try:
        device_id = call.data.split('_')[2]
        markup = types.InlineKeyboardMarkup(row_width=1)
        buttons = [
            types.InlineKeyboardButton(
                "1 –º–µ—Å—è—Ü - 299‚ÇΩ", 
                callback_data=f"new_sub_1_299_{device_id}"
            ),
            types.InlineKeyboardButton(
                "3 –º–µ—Å—è—Ü–∞ - 852‚ÇΩ\n‚ú® –°–∫–∏–¥–∫–∞ 5%", 
                callback_data=f"new_sub_3_852_{device_id}"
            ),
            types.InlineKeyboardButton(
                "6 –º–µ—Å—è—Ü–µ–≤ - 1615‚ÇΩ\nüåü –°–∫–∏–¥–∫–∞ 10%", 
                callback_data=f"new_sub_6_1615_{device_id}"
            ),
            types.InlineKeyboardButton(
                "12 –º–µ—Å—è—Ü–µ–≤ - 3052‚ÇΩ\nüí´ –°–∫–∏–¥–∫–∞ 15%", 
                callback_data=f"new_sub_12_3052_{device_id}"
            ),
            types.InlineKeyboardButton(
                "‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", 
                callback_data=f"return_to_vpn_{device_id}"
            )
        ]
        markup.add(*buttons)
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=(
                "üåü <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</b>\n\n"
                "‚Ä¢ –ö–∞–∂–¥–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏\n"
                "‚Ä¢ –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞\n"
                "‚Ä¢ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã\n\n"
                "‚ú® <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</b>"
            ),
            reply_markup=markup,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"Error in handle_more_devices: {e}", exc_info=True)
        bot.answer_callback_query(
            call.id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith('new_sub_'))
def handle_new_subscription(call):
    try:
        logger.info(f"Starting handle_new_subscription with data: {call.data}")
        # new_sub_1_200_cd5f893e
        _, sub, duration, price, device_id = call.data.split('_')
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton(
                "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", 
                callback_data=f"pay_new_{duration}_{device_id}"
            ),
            types.InlineKeyboardButton(
                "‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                callback_data=f"more_devices_{device_id}"
            )
        )
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=(
                f"üíé <b>–ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
                f"üì± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º–µ—Å.\n"
                f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price}‚ÇΩ\n\n"
                f"–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã:"
            ),
            reply_markup=markup,
            parse_mode='HTML'
        )
        
    except ValueError as e:
        logger.error(f"Error parsing callback data: {e}", exc_info=True)
        bot.answer_callback_query(
            call.id,
            text="‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
            show_alert=True
        )
    except Exception as e:
        logger.error(f"Error in handle_new_subscription: {e}", exc_info=True)
        bot.answer_callback_query(
            call.id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–ª–∞—Ç—ã –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith('pay_new_'))
def handle_new_device_payment(call):
    try:
        _, _, duration, device_id = call.data.split('_')
        new_device_id = str(uuid.uuid4())[:8]
        
        # –¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ (–∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π)
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton(
                "‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞",
                callback_data=f"confirm_new_{duration}_{new_device_id}"
            )
        )
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=(
                "üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
                "–î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
            ),
            reply_markup=markup,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"Error in handle_new_device_payment: {e}", exc_info=True)
        bot.answer_callback_query(
            call.id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_new_'))
def handle_new_device_confirmation(call):
    try:
        _, _, duration, new_device_id = call.data.split('_')
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        result = sub_handler.add_subscription(
            user_id=call.from_user.id,
            duration=int(duration),
            device_id=new_device_id
        )
        
        if result['success']:
            config_link = sub_handler.xui_client.get_client_config(result['uuid'], new_device_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=(
                    f"‚úÖ <b>–ù–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\n"
                    f"üì± ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {new_device_id}\n"
                    f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º–µ—Å.\n\n"
                    f"üîó <b>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n\n"
                    f"<code>{config_link}</code>\n\n"
                    f"–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:\n"
                    f"/help_setup"
                ),
                parse_mode='HTML',
                disable_web_page_preview=True
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            bot.send_message(
                chat_id=call.message.chat.id,
                text=config_link,
                disable_web_page_preview=True
            )
            
    except Exception as e:
        logger.error(f"Error in handle_new_device_confirmation: {e}", exc_info=True)
        bot.answer_callback_query(
            call.id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–†–û–î–õ–ò–¢–¨ –¢–ê–†–ò–§"
@bot.callback_query_handler(func=lambda call: call.data.startswith('extend_'))
def handle_extend(call):
    try:
        logger.info(f"Handling extend callback with data: {call.data}")
        device_id = call.data.split('_')[1]
        markup = types.InlineKeyboardMarkup(row_width=1)
        buttons = [
            types.InlineKeyboardButton(
                "1 –º–µ—Å—è—Ü - 299‚ÇΩ", 
                callback_data=f"extend_sub_1_299_{device_id}"
            ),
            types.InlineKeyboardButton(
                "3 –º–µ—Å—è—Ü–∞ - 852‚ÇΩ\n‚ú® –°–∫–∏–¥–∫–∞ 5%", 
                callback_data=f"extend_sub_3_852_{device_id}"
            ),
            types.InlineKeyboardButton(
                "6 –º–µ—Å—è—Ü–µ–≤ - 1615‚ÇΩ\nüåü –°–∫–∏–¥–∫–∞ 10%", 
                callback_data=f"extend_sub_6_1615_{device_id}"
            ),
            types.InlineKeyboardButton(
                "12 –º–µ—Å—è—Ü–µ–≤ - 3052‚ÇΩ\nüí´ –°–∫–∏–¥–∫–∞ 15%", 
                callback_data=f"extend_sub_12_3052_{device_id}"
            ),
            types.InlineKeyboardButton(
                "‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", 
                callback_data=f"return_to_vpn_{device_id}"
            )
        ]
        markup.add(*buttons)
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=(
                "üåü <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
                "‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è —Å –º–æ–º–µ–Ω—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π\n"
                "‚Ä¢ –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ª—é–±–æ–π —Ç–∞—Ä–∏—Ñ\n\n"
                "‚ú® <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–¥–ª–µ–Ω–∏—è:</b>"
            ),
            reply_markup=markup,
            parse_mode='HTML'
        )
        logger.info("Successfully sent extend menu")
        
    except Exception as e:
        logger.error(f"Error in handle_extend: {e}", exc_info=True)
        bot.answer_callback_query(
            call.id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–û–î–ê–†–ò–¢–¨ –ü–û–î–ü–ò–°–ö–£"
@bot.callback_query_handler(func=lambda call: call.data.startswith('gift_'))
def handle_gift(call):
    try:
        device_id = call.data.split('_')[1]
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton(
                "‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", 
                callback_data=f"return_to_vpn_{device_id}"
            )
        )
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=(
                "üéÅ <b>–ü–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b>\n\n"
                "–î–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, "
                "–ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–º—É —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥:\n\n"
                f"<code>GIFT_{device_id}</code>\n\n"
                "‚ùóÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–¥–∞ —Ç–µ–∫—É—â–∞—è "
                "–ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
            ),
            reply_markup=markup,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"Error in handle_gift: {e}", exc_info=True)
        bot.answer_callback_query(
            call.id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–ê–°–¢–†–û–ò–¢–¨ –ê–í–¢–û–ü–†–û–î–õ–ï–ù–ò–ï"
@bot.callback_query_handler(func=lambda call: call.data.startswith('autopay_'))
def handle_autopay(call):
    try:
        device_id = call.data.split('_')[1]
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton(
                "‚úÖ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ", 
                callback_data=f"autopay_on_{device_id}"
            ),
            types.InlineKeyboardButton(
                "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ", 
                callback_data=f"autopay_off_{device_id}"
            ),
            types.InlineKeyboardButton(
                "‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", 
                callback_data=f"return_to_vpn_{device_id}"
            )
        )
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=(
                "üîÑ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è</b>\n\n"
                "–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–º –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç "
                "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å—Å—è –∑–∞ 24 —á–∞—Å–∞ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è.\n\n"
                "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ"
            ),
            reply_markup=markup,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"Error in handle_autopay: {e}", exc_info=True)
        bot.answer_callback_query(
            call.id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data.startswith('extend_sub_'))
def handle_extend_subscription(call):
    try:
        _, _, duration, price, device_id = call.data.split('_')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton(
                "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", 
                callback_data=f"pay_extend_{duration}_{device_id}"
            ),
            types.InlineKeyboardButton(
                "‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                callback_data=f"extend_{device_id}"
            )
        )
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=(
                f"üíé <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
                f"üì± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º–µ—Å.\n"
                f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price}‚ÇΩ\n\n"
                f"–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã:"
            ),
            reply_markup=markup,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"Error in handle_extend_subscription: {e}", exc_info=True)
        bot.answer_callback_query(
            call.id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )

# 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@bot.callback_query_handler(func=lambda call: call.data == "help_back")
def handle_back_button(call):
    try:
        markup = types.InlineKeyboardMarkup(row_width=1)
        buttons = [
            types.InlineKeyboardButton("üçé iOS / iPadOS / MacOS", callback_data="help_ios"),
            types.InlineKeyboardButton("üì± Android", callback_data="help_android"),
            types.InlineKeyboardButton("üì± Huawei / Honor", callback_data="help_huawei"),
            types.InlineKeyboardButton("üíª Windows", callback_data="help_windows"),
            types.InlineKeyboardButton("üì∫ Android TV", callback_data="help_androidtv"),
            types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="help_update")
        ]
        markup.add(*buttons)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        try:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="üí° <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>",
                reply_markup=markup,
                parse_mode='HTML'
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            bot.send_message(
                call.message.chat.id,
                "üí° <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>",
                reply_markup=markup,
                parse_mode='HTML'
            )
            
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Error in handle_back_button: {e}", exc_info=True)
        bot.answer_callback_query(
            call.id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )

def main():
    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        bot.polling(none_stop=True, interval=0)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        main()  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

if __name__ == '__main__':
    main() 